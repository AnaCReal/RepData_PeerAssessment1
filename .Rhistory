unzip("activity.zip")
data <- read.csv("activity.csv")
str(data)
Sys.setlocale("LC_TIME", "C")
data$date <- as.Date(data$date, format="%Y-%m-%d")
str(data)
head(data)
res <- tapply(data$steps, data$date, sum)
res
datam <- tapply(data$steps, data$date, mean, na.rm=TRUE)
datam
data[data$date=2012-10-01,]
data[data$date==2012-10-01,]
data[data$date=="2012-10-01",]
hist(res, col = brewer.pal(n=61, name"PuBu"))
hist(res, col = brewer.pal(n=61, name="PuBu"))
hist(res)
hist(res, n=61)
library(ggplot2)
ggplot(data, aes(x=steps, color=date)) + geom_histogram()
hist(data$date, breaks="days")
hist(res)
table(data)
table(data$date)
datam
table(datam)
names(datam)
dat <- merge(datam, datame)
datam$me <- tapply(data$steps, data$date, median, na.rm=TRUE)
datam <- tapply(data$steps, data$date, mean, na.rm=TRUE)
datame <- tapply(data$steps, data$date, median, na.rm=TRUE)
dat <- merge(datam, datame)
head(dat)
summary(data$date)
tapply(data$steps, date$date, summary)
tapply(date$date, summary)
days <- group_by(data,date)
library(dplyr)
days <- group_by(data,date)
summary(days)
rep <- unique(data$date)
rep<- cbind(rep, datam, datame)
colnames(rep) <- c("Date", "Mean", "Median")
head(rep)
datame
datame <- tapply(data$steps, data$date, median)
datame
median(data[data$date=="2012-10-02",data$steps])
median(data[data$date=="2012-10-02",steps])
median(data[data$date=="2012-10-02","steps"])
tail(data)
median(data[data$date=="2012-10-02","steps"], na.rm=TURE)
median(data[data$date=="2012-10-02","steps"], na.rm=TRUE)
median(data[data$date=="2012-10-03","steps"], na.rm=TURE)
median(data[data$date=="2012-10-03","steps"], na.rm=TRUE)
data$interval
mean(res)
mean(res, rm.na=TRUE)
total<- tapply(data$steps, data$date, sum, na.rm=TRUE)
summary(total)
mean(total)
library(dplyr)
by_interval <- data %>% group_by(interval)
by_interval <- summarize(by_interval, steps=mean(steps))
head(by_interval)
plot(by_interval$interval, by_interval$steps, type="l")
by_interval$steps
daily <- aggregate(data$steps, list(data$interval), mean)
head(daily)
daily <- aggregate(data$steps, list(data$interval), mean, na.rm=TRUE)
head(daily)
colnames(daily) <- c("Interval", "Average.Steps")
library(ggplot2)
qplot(Interval, Average.Steps, data=daily, geom="line")
max <- daily[which.max(daily$Average.Steps),"Interval"]
max
max <- daily[which.max(daily$Average.Steps),"]
r
max <- daily[which.max(daily$Average.Steps),"]
max <- daily[which.max(daily$Average.Steps),]
max
nnaData <- data
source("noNa.R")
head(nnaData)
ntotal<- tapply(nnaData$steps, nnaData$date, sum)
hist(ntotal, col = "aquamarine1", main="Histogram of total number of steps per day", xlab="Total steps per day")
summary(ntotal)
nnaData$day <- weekdays(nnaData$date)
nnaData$day[nnaData$day %in% c("Saturday", "Sunday")] <- "weekend"
nnaData$day[nnaData$day != "weekend"] <- "weekday"
nnaData$day <- as.factor(nnaData$day)
type_day <- aggregate(steps ~ interval + day, data=nnaData, mean)
qplot(interval, steps, data=type_day, geom="line", xlab = "Interval", ylab = "Average number of steps", main = "Comparisson number of steps for weekdays and weekends", facet_wrap(day~.))
qplot(interval, steps, data=type_day, geom="line", xlab = "Interval", ylab = "Average number of steps", main = "Comparisson number of steps for weekdays and weekends", facet_wrap(day~))
qplot(interval, steps, data=type_day, geom="line", xlab = "Interval", ylab = "Average number of steps", main = "Comparisson number of steps for weekdays and weekends", facet_wrap(~days))
qplot(interval, steps, data=type_day, geom="line", xlab = "Interval", ylab = "Average number of steps", main = "Comparisson number of steps for weekdays and weekends", facet_wrap(~day))
ggplot(type_day, aes(interval, steps)) + geom_line() + facet_grid(~days)
ggplot(type_day, aes(interval, steps)) + geom_line() + facet_grid(~day)
ggplot(type_day, aes(interval, steps)) + geom_line() + facet_grid(.~day)
str(type_day)
str(nnaData)
nnaData$day <- weekdays(nnaData$date)
str(nnaData)
table(nnaData$day)
nnaData$day[nnaData$day %in% c("sábado", "domingo")] <- "weekend"
nnaData$day[nnaData$day != "weekend"] <- "weekday"
nnaData$day <- as.factor(nnaData$day)
str(nnaData)
type_day <- aggregate(steps ~ interval + day, data=nnaData, mean)
ggplot(type_day, aes(interval, steps)) + geom_line() + facet_grid(.~day)
type_day <- aggregate(steps ~ interval + day, data=nnaData, mean)
ggplot(type_day, aes(interval, steps)) + geom_line() + facet_grid(~day)
type_day <- aggregate(steps ~ interval + day, data=nnaData, mean)
ggplot(type_day, aes(interval, steps)) + geom_line() + facet_grid(day~.)
type_day <- aggregate(steps ~ interval + day, data=nnaData, mean)
ggplot(type_day, aes(interval, steps)) + geom_line() + facet_grid(day~.)
type_day <- aggregate(steps ~ interval + day, data=nnaData, mean)
ggplot(type_day, aes(interval, steps)) + geom_line() + facet_grid(day~.)
g <- ggplot(type_day, aes(interval, steps))
g + geom_line() + facet_grid(day~.) + labs(x="Interval", y="Average Steps", title="Average steps per interval")
install.packages("httpuv")
qplot(interval, steps, data=type_day, geom="line", facets=.~day)
qplot(interval, steps, data=type_day, geom="line", facets=day~.)
nnaData$day <- weekdays(nnaData$date)
nnaData$day[nnaData$day %in% c("sábado", "domingo")] <- "weekend"
nnaData$day[nnaData$day != "weekend"] <- "weekday"
nnaData$day <- as.factor(nnaData$day)
str(nnaData)
type_day <- aggregate(steps ~ interval + day, data=nnaData, mean)
str(type_day)
qplot(interval, steps, data=type_day, geom="line", facets=day~., color=day)
nnaData$day <- weekdays(nnaData$date)
nnaData$day[nnaData$day %in% c("sábado", "domingo")] <- "weekend"
nnaData$day[nnaData$day != "weekend"] <- "weekday"
nnaData$day <- as.factor(nnaData$day)
```
type_day <- aggregate(steps ~ interval + day, data=nnaData, mean)
qplot(interval, steps, data=type_day, geom="line", facets=day~., color=day, xlab = "Intervals", ylab = "Average Steps", main="Weekend vs Weekday Average Steps")
library(ggplot2)
qplot(interval, steps, data=type_day, geom="line", facets=day~., color=day, xlab = "Intervals", ylab = "Average Steps", main="Weekend vs Weekday Average Steps")
unlink('PA1_template_cache', recursive = TRUE)
library(knitr)
knit2html("PA1_template.Rmd")
